// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_netReg_RCPPEXPORTS_H_GEN_
#define RCPP_netReg_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace netReg {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("netReg", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("netReg", "_netReg_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in netReg");
            }
        }
    }

    inline std::vector<double> node_degrees_(const arma::Mat<double>& x) {
        typedef SEXP(*Ptr_node_degrees_)(SEXP);
        static Ptr_node_degrees_ p_node_degrees_ = NULL;
        if (p_node_degrees_ == NULL) {
            validateSignature("std::vector<double>(*node_degrees_)(const arma::Mat<double>&)");
            p_node_degrees_ = (Ptr_node_degrees_)R_GetCCallable("netReg", "_netReg_node_degrees_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_node_degrees_(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline arma::Mat<double> laplacian_(const arma::Mat<double>& x) {
        typedef SEXP(*Ptr_laplacian_)(SEXP);
        static Ptr_laplacian_ p_laplacian_ = NULL;
        if (p_laplacian_ == NULL) {
            validateSignature("arma::Mat<double>(*laplacian_)(const arma::Mat<double>&)");
            p_laplacian_ = (Ptr_laplacian_)R_GetCCallable("netReg", "_netReg_laplacian_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_laplacian_(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::Mat<double> >(rcpp_result_gen);
    }

    inline arma::Col<double> intercept_(arma::Mat<double>& X, arma::Mat<double>& Y, arma::Mat<double>& B) {
        typedef SEXP(*Ptr_intercept_)(SEXP,SEXP,SEXP);
        static Ptr_intercept_ p_intercept_ = NULL;
        if (p_intercept_ == NULL) {
            validateSignature("arma::Col<double>(*intercept_)(arma::Mat<double>&,arma::Mat<double>&,arma::Mat<double>&)");
            p_intercept_ = (Ptr_intercept_)R_GetCCallable("netReg", "_netReg_intercept_");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_intercept_(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::Col<double> >(rcpp_result_gen);
    }

}

#endif // RCPP_netReg_RCPPEXPORTS_H_GEN_
