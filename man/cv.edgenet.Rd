% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edgenet_modelselection.R
\name{cv.edgenet}
\alias{cv.edgenet}
\title{Find the optimal shrinkage parameters for edgenet}
\usage{
cv.edgenet(X, Y, G.X = NULL, G.Y = NULL, lambda = NA_real_,
  psigx = NA_real_, psigy = NA_real_, thresh = 1e-05,
  maxit = 1e+05, learning.rate = 0.01, family = gaussian,
  optim.maxit = 100, optim.thresh = 0.01, nfolds = 10)
}
\arguments{
\item{X}{input matrix, of dimension (\code{n} x \code{p})
where \code{n} is the number of observations and \code{p} is the number
of covariables. Each row is an observation vector.}

\item{Y}{output matrix, of dimension (\code{n} x \code{q})
where \code{n} is the number of observations and \code{q} is the number
of response variables Each row is an observation vector.}

\item{G.X}{non-negativ affinity matrix for \code{n}, of dimensions
(\code{p} x \code{p}) where \code{p} is the number of covariables \code{X}.
Providing a graph \code{G.X} will optimize the regularization
parameter \code{psi.gx}. If this is not desired just set \code{G.X} to
\code{NULL}.}

\item{G.Y}{non-negativ affinity matrix for \code{n}, of dimensions
(\code{q} x \code{q}) where \code{q} is the number of responses \code{Y}.
Providing a graph \code{G.Y} will optimize the regularization
parameter \code{psi.gy}. If this is not desired just set \code{G.Y} to
\code{NULL}.}

\item{lambda}{\code{numerical} shrinkage parameter for LASSO. Per default
this parameter is
 set to \code{NULL} which means that \code{lambda} is going to be estimated
 using cross-validation. If any \code{numerical} value for \code{lambda}
 is set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{psigx}{\code{numerical} shrinkage parameter for graph-regularization
of \code{G.X}. Per default this parameter is
set to \code{NULL} which means that \code{psigx} is going to be estimated
in the cross-validation. If any \code{numerical} value for \code{psigx} is
set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{psigy}{\code{numerical} shrinkage parameter for graph-regularization
of \code{G.Y}. Per default this parameter is
set to \code{NULL} which means that \code{psigy} is going to be estimated
in the cross-validation. If any \code{numerical} value for \code{psigy} is
set, estimation of the optimal parameter will \emph{not} be conducted.}

\item{thresh}{\code{numerical} threshold for coordinate descent}

\item{maxit}{maximum number of iterations for the coordinate descent
(\code{integer})}

\item{family}{family of response, e.g. \emph{gaussian}}

\item{optim.maxit}{the maximum number of iterations for the optimization
(\code{integer}). Usually 1e4 is a good choice.}

\item{nfolds}{the number of folds to be used - default is 10
(minimum 3, maximum \code{nrow(X)}).}

\item{optim.epsilon}{\code{numerical} threshold criterion for the
optimization to stop.  Usually 1e-3 is a good choice.}
}
\value{
An object of class \code{cv.edgenet}
\item{call }{ the call that produced the object}
\item{lambda }{ the estimated (\code{p} x \code{q})-dimensional
 coefficient matrix B.hat}
\item{psigx }{ the estimated (\code{q} x \code{1})-dimensional
 vector of intercepts}
\item{psigy }{ the estimated (\code{q} x \code{1})-dimensional vector
 of intercepts}
}
\description{
Finds the optimal shrinkage parameters
 using cross-validation for edgenet. We use the BOBYQA algorithm to
 find the optimial regularization parameters and coordinate
 descent in order to minimize the objective function of the linear model.
}
\examples{
X <- matrix(rnorm(100*10), 100, 10)
b <- matrix(rnorm(100), 10)
G.X <-  abs(rWishart(1, 10, diag(10))[,,1])
G.Y <-  abs(rWishart(1, 10, diag(10))[,,1])
diag(G.X) <- diag(G.Y) <- 0

# estimate the parameters of a Gaussian model
Y <- X \%*\% b + matrix(rnorm(100 * 10), 100)

## dont use affinity matrices and estimate lambda
fit <- cv.edgenet(X=X, Y=Y, family=gaussian,
                  maxit=10, optim.maxit=1)
## only provide one matrix and estimate lambda
fit <- cv.edgenet(X=X, Y=Y, G.X=G.X, psigx=1, family=gaussian,
                  maxit=10, optim.maxit=1)
## estimate only lambda with two matrices
fit <- cv.edgenet(X=X, Y=Y, G.X=G.X, G.Y, psigx=1, psigy=1,
                  family=gaussian, maxit=10, optim.maxit=1)
## estimate only psigx
fit <- cv.edgenet(X=X, Y=Y, G.X=G.X, G.Y, lambda=1, psigy=1,
                  family=gaussian, maxit=10, optim.maxit=1)
## estimate all parameters
fit<- cv.edgenet(X=X, Y=Y, G.X=G.X, G.Y,
                 family=gaussian, maxit=10, optim.maxit=1)
## if Y is vectorial, we cannot use an affinity matrix for Y
fit<- cv.edgenet(X=X, Y=Y[, 1], G.X=G.X,
                 family=gaussian, maxit=10, optim.maxit=1)

# estimation works the same for binomial models
eta <- 1 / (1 + exp(-X \%*\% b))
Y <- do.call("cbind", lapply(seq(10), function(.) rbinom(100, 1, eta[,.])))
fit <- cv.edgenet(X=X, Y=Y, G.X=G.X, G.Y,
                  family=binomial, maxit=10, optim.maxit=1)
}
