// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/netReg.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// edgenet_rcpp_
Rcpp::List edgenet_rcpp_(const Rcpp::NumericMatrix& XS, const Rcpp::NumericMatrix& YS, const Rcpp::NumericMatrix& GXS, const Rcpp::NumericMatrix& GYS, const int n, const int p, const int q, const double lambda, const double psigx, const double psigy, const int n_iter, const double thresh, const Rcpp::CharacterVector& family);
static SEXP netReg_edgenet_rcpp__try(SEXP XSSEXP, SEXP YSSEXP, SEXP GXSSEXP, SEXP GYSSEXP, SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP lambdaSEXP, SEXP psigxSEXP, SEXP psigySEXP, SEXP n_iterSEXP, SEXP threshSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type XS(XSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type YS(YSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type GXS(GXSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type GYS(GYSSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type psigx(psigxSEXP);
    Rcpp::traits::input_parameter< const double >::type psigy(psigySEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(edgenet_rcpp_(XS, YS, GXS, GYS, n, p, q, lambda, psigx, psigy, n_iter, thresh, family));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP netReg_edgenet_rcpp_(SEXP XSSEXP, SEXP YSSEXP, SEXP GXSSEXP, SEXP GYSSEXP, SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP lambdaSEXP, SEXP psigxSEXP, SEXP psigySEXP, SEXP n_iterSEXP, SEXP threshSEXP, SEXP familySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(netReg_edgenet_rcpp__try(XSSEXP, YSSEXP, GXSSEXP, GYSSEXP, nSEXP, pSEXP, qSEXP, lambdaSEXP, psigxSEXP, psigySEXP, n_iterSEXP, threshSEXP, familySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int netReg_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*.edgenet.cpp)(const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&,const Rcpp::NumericMatrix&,const int,const int,const int,const double,const double,const double,const int,const double,const Rcpp::CharacterVector&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP netReg_RcppExport_registerCCallable() { 
    R_RegisterCCallable("netReg", "netReg_.edgenet.cpp", (DL_FUNC)netReg_edgenet_rcpp__try);
    R_RegisterCCallable("netReg", "netReg_RcppExport_validate", (DL_FUNC)netReg_RcppExport_validate);
    return R_NilValue;
}
